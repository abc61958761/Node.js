我們看到的網頁，了解使用者對UI元件的操作，不會只有是在表單元素內輸入或選擇內容，還有點擊按鈕或送出表單等等DOM事件，
而事件的觸發會造成資料的異動，為了得知資料異動的前後差異，並且做出相對應的回應，才能完成一次的事件處理，
而且必須即時監聽是否有事件被觸發，整個網頁才會有互動性。

## 選項物件屬性：```methods```
methods這個屬性用來定義方法，如果我們在UI操作了什麼動作，都可以寫methods去回傳方法，執行相對應的事件，
通常methods定義方法的方式是一個包住function的object。下面我們寫一個方法可以用來計數，範例如下：

```html
<div id="app">
    <p>{{ count }}</p>
</div>
```
```javascript
var vm = new Vue({
    el: '#app',
    data: {
        count: 0
    },
    methods: {
        addCount: function() {
            this.count += 1;
        }
    }
});
```
為了增加使用者操作頁面的互動性，所以當方法寫好後，就需要有個地方去呼叫(觸發)這個方法，
此時我們可以在HTML元素中加入事件監聽器，使用的指令就是```v-on```。

## 事件處理指令

***v-on***

用途：在HTML元素中加入事件監聽器，即可找到對應的事件處理方法，也就是我們在vue instance宣告的methods。
縮寫：@
表達式：function、inline statement、object
用法：

現在我們來呼叫剛剛那個計數的方法，使用一個按鈕讓他可以執行方法並傳回結果。

1. 方法 function 寫法：

```html
<div id="app">
    <!-- 上下兩者結果一樣，下面為縮寫寫法 -->
    <button v-on:click="addCount()">點我+1</button>
    <button @click="addCount()">點我+1</button>
    <p>{{ count }}</p>
</div>
```
```javascript
var vm = new Vue({
    el: '#app',
    data: {
        count: 0
    },
    methods: {
        addCount: function() {
            this.count += 1;
        }
    }
});
```

2. 內行敘述 inline statement 寫法


